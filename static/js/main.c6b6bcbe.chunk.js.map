{"version":3,"sources":["components/Chartstrip.tsx","App.tsx","index.tsx"],"names":["Chartstrip","data","stripLength","map","item","i","className","name","style","width","time","marginLeft","slice","reduce","a","x","initialData","App","useState","currentData","setCurrentData","preparedData","setrandomTime","length","push","Math","floor","random","console","log","useEffect","transformData","timer","setTimeout","clearTimeout","type","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAcaA,EAA8B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAClD,OACE,mCACGD,EAAKE,KAAI,SAACC,EAAMC,GAAP,OACR,sBAEEC,UAAU,OAFZ,UAIE,qBAAKA,UAAU,aAAf,SACE,mBAAGA,UAAU,iBAAb,mBACMF,EAAKG,KADX,WAIF,qBACED,UAAU,eACVE,MAAO,CACLC,MAAOP,EAAcE,EAAKM,KAC1BC,WAAaV,EAAKW,MAAM,EAAGP,GAAGQ,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEL,OAAM,GAAMR,GAJrE,SAOE,mBAAGI,UAAU,aAAb,SAA2BF,EAAKM,WAf7BN,EAAKG,YCfdS,EAAc,CAClB,CAAET,KAAM,eAAgBG,KAAM,KAC9B,CAAEH,KAAM,eAAgBG,KAAM,IAC9B,CAAEH,KAAM,YAAaG,KAAM,GAC3B,CAAEH,KAAM,OAAQG,KAAM,MASXO,EAAgB,WAC3B,MAAsCC,mBAAyB,IAA/D,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAA+B,GAiB/BC,EAAgB,WAEpB,IAAK,IAAIjB,EAAI,EAAGA,EAAIc,EAAYI,OAAQlB,IACtCgB,EAAaG,KAAb,2BACKL,EAAYd,IADjB,IAEEK,KAAMe,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,MAK5CC,QAAQC,IAAIR,GACZD,EAAeC,IAajB,OAVAS,qBAAU,WACRV,EA9BoB,WAEpB,IAAK,IAAIf,EAAI,EAAGA,EAAIW,EAAYO,OAAQlB,IACtCgB,EAAaG,KAAb,2BACKR,EAAYX,IADjB,IAEEI,MARQ,EAQOO,EAAYX,GAAGK,QAOlC,OAFAkB,QAAQC,IAAIR,GAELA,EAkBQU,MACd,IAEHD,qBAAU,WACR,IAAME,EAAQC,YAAW,kBAAMX,MAAiB,KAEhD,OAAO,kBAAMY,aAAaF,MACzB,CAACb,IAGF,sBAAKb,UAAU,MAAf,UACE,mBAAGA,UAAU,QAAb,kCACA,cAAC,EAAD,CACEL,KAAMkB,EACNjB,YA/CQ,IAiDV,wBACEiC,KAAK,SACLC,QAAS,WACPd,KAHJ,uBC/DNe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c6b6bcbe.chunk.js","sourcesContent":["import React from 'react';\nimport './Chartstrip.scss';\n\ninterface PreparedData {\n  name: string;\n  time: number;\n  width: number;\n}\n\ninterface Props {\n  data: PreparedData[];\n  stripLength: number;\n}\n\nexport const Chartstrip: React.FC<Props> = ({ data, stripLength }) => {\n  return (\n    <>\n      {data.map((item, i) => (\n        <div\n          key={item.name}\n          className=\"wrap\"\n        >\n          <div className=\"wrap__name\">\n            <p className=\"wrap__nameitem\">\n              {`${item.name} : `}\n            </p>\n          </div>\n          <div\n            className=\"wrap__strips\"\n            style={{\n              width: stripLength * item.time,\n              marginLeft: (data.slice(0, i).reduce((a, x) => a + x.time, 0)) * stripLength,\n            }}\n          >\n            <p className=\"wrap__time\">{item.time}</p>\n          </div>\n        </div>\n\n      ))}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { Chartstrip } from './components';\n\nconst initialData = [\n  { name: 'Landing Page', time: 7.4 },\n  { name: 'Configurator', time: 0.2 },\n  { name: 'Check-out', time: 7.0 },\n  { name: 'Deal', time: 3.8 },\n];\n\ninterface PreparedData {\n  name: string;\n  time: number;\n  width: number;\n}\n\nexport const App: React.FC = () => {\n  const [currentData, setCurrentData] = useState<PreparedData[]>([]);\n  const scale = 7;\n  const preparedData: PreparedData[] = [];\n\n  const transformData = () => {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < initialData.length; i++) {\n      preparedData.push({\n        ...initialData[i],\n        width: scale * initialData[i].time,\n      });\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(preparedData);\n\n    return preparedData;\n  };\n\n  const setrandomTime = () => {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < currentData.length; i++) {\n      preparedData.push({\n        ...currentData[i],\n        time: Math.floor(Math.random() * 100) / 10,\n      });\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(preparedData);\n    setCurrentData(preparedData);\n  };\n\n  useEffect(() => {\n    setCurrentData(transformData());\n  }, []);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setrandomTime(), 30000);\n\n    return () => clearTimeout(timer);\n  }, [currentData]);\n\n  return (\n    <div className=\"box\">\n      <p className=\"title\">SPENT TIME (SECONDS)</p>\n      <Chartstrip\n        data={currentData}\n        stripLength={scale}\n      />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setrandomTime();\n        }}\n      >\n        Click\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}